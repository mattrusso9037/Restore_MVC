package controller;

import java.io.File;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
import model.Database;
import model.GUIHelper;
import model.Item;
import model.Validation;

public class AdminController extends MainController implements Initializable {
	@FXML
	private ComboBox<String> typeComboBox;
	@FXML
	private TextField descriptionTextBox;
	@FXML
	private TextField priceTextBox;
	@FXML
	private TextField nameTextBox;
	@FXML
	private Button addItemButton;
	@FXML
	private Button editButton;
	@FXML
	private Button saveButton;
	@FXML
	private ListView<Item> listView;
	@FXML
	private ImageView itemImageView;
	@FXML
	private TextField imagePathTextField;
	@FXML
	private Button imageChooserButton;
	@FXML
	private Button deleteButton;
	@FXML
	private Hyperlink azLink;
	@FXML
	private Hyperlink priceLink;
	@FXML
	private Hyperlink recentLink;

	private Image image;
	private Item newItem;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		System.out.println(Database.itemBag.getItemMap().size());
		GUIHelper.setCustomCells(listView, "");


		if (!Database.itemBag.getItemMap().isEmpty()) {
			Item.setIdCounter(Database.itemBag.getItemMap().size());
			listView.setItems(GUIHelper.setAllData(listView));
		} else {
			Item.setIdCounter(0);
 
		}

		typeComboBox.getItems().addAll("wood", "furniture", "window", "door");
		typeComboBox.setVisibleRowCount(4);
		addItemButton.setVisible(true);
		editButton.setVisible(true);
		saveButton.setVisible(false);
//		GUIHelper.setCustomCells(listView, String.valueOf(newItem.getId()));

	}

	public void editButtonFire(ActionEvent event) {
		typeComboBox.setValue(GUIHelper.getSelected(listView).getType());
		nameTextBox.setText(GUIHelper.getSelected(listView).getName());
		descriptionTextBox.setText(GUIHelper.getSelected(listView).getDescription());
		priceTextBox.setText(String.valueOf(GUIHelper.getSelected(listView).getPrice()));
		imagePathTextField.setText(GUIHelper.getSelected(listView).getImageFileName());
		addItemButton.setVisible(false);
		editButton.setVisible(false);
		saveButton.setVisible(true);

	}

	public void saveButtonFire(ActionEvent event) {
		GUIHelper.getSelected(listView).setType(typeComboBox.getValue());
		GUIHelper.getSelected(listView).setName(nameTextBox.getText());
		GUIHelper.getSelected(listView).setDescription(descriptionTextBox.getText());
		GUIHelper.getSelected(listView).setPrice(Double.parseDouble(priceTextBox.getText()));
		GUIHelper.getSelected(listView).setImageFileName(imagePathTextField.getText());
		Database.itemBag.save();

		if (imagePathTextField.getText() != null) {
			Database.imageBag.save(imagePathTextField.getText());
		}
		
		typeComboBox.setValue(null);
		nameTextBox.clear();
		descriptionTextBox.clear();
		priceTextBox.clear();
		imagePathTextField.clear();
		listView.setItems(GUIHelper.setAllData(listView));

	}

	public void logOutFire(ActionEvent event) {
		System.out.println("log out");
	}

	public void addItemFire(ActionEvent event) {

		switchView("/view/addItemView.fxml", event);
	}

	public void deleteButtonFire(ActionEvent event) {
		Alert alert = new Alert(AlertType.CONFIRMATION);
		alert.setTitle("Delete Item");
		alert.setContentText("Are you sure you want to delete this item?");
		alert.showAndWait();
		
		Database.itemBag.getItemMap().remove(GUIHelper.getSelected(listView).getId());
		Database.itemBag.save();
		listView.setItems(GUIHelper.setAllData(listView));

	}

	public void displayImage() {

		Database.imageBag.load(GUIHelper.getSelected(listView).getImageFileName(), itemImageView);
	}

	public void addItemListFire(ActionEvent event) {

		newItem = new Item(typeComboBox.getValue(), nameTextBox.getText(), descriptionTextBox.getText(),
				Double.parseDouble(priceTextBox.getText()), imagePathTextField.getText(), Database.getCreatedDate());

		if (imagePathTextField.getText() != null) {
			Database.imageBag.save(imagePathTextField.getText());
		}
		
		Database.itemBag.addItem2(newItem.getId(), newItem);
		Database.itemBag.save();
		typeComboBox.setValue(null);
		nameTextBox.clear();
		descriptionTextBox.clear();
		priceTextBox.clear();
		imagePathTextField.clear();
		listView.setItems(GUIHelper.setAllData(listView));
		GUIHelper.setSelected(listView, newItem);

	}

	public void imageChooserButtonFire(ActionEvent event) {
		FileChooser fileChooser = new FileChooser();
		File selectedFile = fileChooser.showOpenDialog(null);
		
		if (selectedFile != null) {
			imagePathTextField.setText(selectedFile.getPath());

			image = new Image("file:///" + selectedFile.getPath());

			System.out.println("file:///" + selectedFile.getPath());
			itemImageView.setImage(image);

		}
	}

	public void backFire(ActionEvent event) {

		listView.getItems().clear();
		if (Validation.isAdmin(Database.currentUser.getCurrent().getUsername())) {
			switchView("/view/adminCenter.fxml", event);
		} else {
			switchView("/view/mainView.fxml", event);

		}
	}

	public void azLinkFire(ActionEvent event) {
		GUIHelper.saveDataSize(GUIHelper.getData().size());
		listView.setItems(GUIHelper.setSortedNameData(listView));
	}

	public void priceLinkFire(ActionEvent event) {
		GUIHelper.saveDataSize(GUIHelper.getData().size());
		listView.setItems(GUIHelper.setSortedPriceData(listView));
	}

	public void recentLinkFire(ActionEvent event) {
		GUIHelper.saveDataSize(GUIHelper.getData().size());
		listView.setItems(GUIHelper.setSortedRecentlyCreatedData(listView));

	}

}
