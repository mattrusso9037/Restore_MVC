package controller;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.Admin;
import model.Database;
import model.Employee;
import model.GUIHelper;
import model.User;
import model.Validation;

public class LoginController extends MainController {
	@FXML
	private Button signInBtn;
	@FXML
	private Hyperlink createAccount;
	@FXML
	private TextField username;
	@FXML
	private TextField password;
	@FXML
	private Label isValidLabel;
	@FXML
	private Button cancelButton;

	@Override
	public void initialize(URL location, ResourceBundle resources) {

		signInBtn.setDefaultButton(true);
	}

	public void cancelButtonFire(ActionEvent event) {
		switchView("/view/mainView.fxml", event);
	}

	public void signInFire(ActionEvent event) {

		User user = null;
		Employee employee = null;

		if (Validation.isEmployee(username.getText())) {
			employee = (Employee) Database.employeeBag.getEmployeeMap().get(username.getText());
			Database.currentUser.setCurrent(employee);

			if (Validation.passwordsMatch(password.getText(), employee.getPassword())) {
				System.out.println("passwords match");
				System.out.println("obj is employee");
				if (employee.getPassword().equals("1234")) {
					Database.currentUser.setCurrent(employee);
					switchView("/view/adminFirstLogin.fxml", event);

				} else {
					Database.currentUser.setCurrent(employee);
					switchView("/view/mainView.fxml", event);
				}

			} else {
				isValidLabel.setVisible(true);
				isValidLabel.setText("*invalid password");
				GUIHelper.setPause(isValidLabel);
			}

		} else {
			isValidLabel.setVisible(true);
			isValidLabel.setText("user not found");
			GUIHelper.setPause(isValidLabel);

		}

		// if user exists
		if (Validation.isUser(username.getText())) {
			user = (User) Database.userBag.getUserMap().get(username.getText());

			if (Validation.passwordsMatch(password.getText(), user.getPassword())) {
				Database.currentUser.setCurrent(user);
				Database.userBag.load();
				switchView("/view/mainView.fxml", event);
			}

		}
		if (!Validation.userExists(user.getUsername())) {
			isValidLabel.setText("*user not found");
		}

		isValidLabel.setText("*invalid password");

		// Admin
		if (Validation.isAdmin(username.getText())) {
			if (Validation.passwordsMatch(password.getText(), Admin.get_Admin().getPassword())) {

				if (Admin.get_Admin().getPassword().equals("1234")) {
					Database.currentUser.setCurrent(Admin.get_Admin());
					switchView("/view/adminFirstLogin.fxml", event);

				} else {

					Database.currentUser.setCurrent(Admin.get_Admin());
					switchView("/view/mainView.fxml", event);
				}

			}

		}
		isValidLabel.setText("*invalid password");

	}

	public void createAccountFire(ActionEvent event) {
		switchView("/view/createAccountView.fxml", event);
	}

}
